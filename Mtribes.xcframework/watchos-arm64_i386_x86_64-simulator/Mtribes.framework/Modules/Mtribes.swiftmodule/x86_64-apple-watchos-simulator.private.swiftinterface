// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-watchos3.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mtribes
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreFoundation
import CoreGraphics
import Foundation
import Security
import Swift
import WatchKit
import _Concurrency
import _StringProcessing
import zlib
@available(iOS 13.0, tvOS 13.0, macOS 10.15, watchOS 6.0, *)
public struct MTSessionPublisher : Combine.Publisher {
  public typealias Output = Mtribes.MTSessionStatus
  public typealias Failure = Swift.Never
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == Mtribes.MTSessionStatus
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, watchOS 6.0, *)
extension Mtribes.MTSession {
  public func start(options: Mtribes.StartOptions? = nil) -> Mtribes.MTSessionPublisher
  public func update(fields: Mtribes.UserFields = [:]) -> Mtribes.MTSessionPublisher
  public func changed() -> Combine.AnyPublisher<Mtribes.MTSessionEvent, Swift.Never>
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, watchOS 6.0, *)
extension Mtribes.MTExperience {
  public func changed() -> Combine.AnyPublisher<Mtribes.MTChangeEvent, Swift.Never>
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, watchOS 6.0, *)
extension Mtribes.MTSection {
  public func changed() -> Combine.AnyPublisher<Mtribes.MTChangeEvent, Swift.Never>
}
public typealias EventOwner = Swift.AnyObject
public class MTBroker {
  public init(session: Mtribes.MTSession)
  public func register(_ node: Mtribes.MTNode)
  public func contains(_ nodeId: Swift.String) -> Swift.Bool
  public func getData(id: Swift.String) -> Swift.String
  public func getData<T>(id: Swift.String, ctx: Mtribes.MTSession? = nil) -> T where T : Mtribes.MTExperienceData
  public func getDefaultData<T>(id: Swift.String, ctx: Mtribes.MTSession? = nil) -> T where T : Mtribes.MTExperienceData
  public func children(id: Swift.String, ctx: Mtribes.MTSession? = nil) -> [Mtribes.MTExperience]
  public func observeChange(_ owner: Mtribes.EventOwner, expId: Swift.String, ctx: Mtribes.MTSession? = nil, _ handler: @escaping Mtribes.ChangedHandler)
  public func track(_ id: Swift.String, type: Swift.String, details: Mtribes.EventMetadata?, payload: Swift.String?, ctx: Mtribes.MTSession? = nil)
  public func state(forId id: Swift.String, ctx: Mtribes.MTSession? = nil) -> Mtribes.MTExperienceState
  public func defaultState(forId id: Swift.String, ctx: Mtribes.MTSession? = nil) -> Mtribes.MTExperienceState
  @objc deinit
}
public struct MTNode {
  public let id: Swift.String
  public let template: Mtribes.MTTemplate
  public let parentId: Swift.String?
  public let childTypes: [Swift.String : Mtribes.MTExperience.Type]?
  public init(id: Swift.String, template: Mtribes.MTTemplate, parentId: Swift.String? = nil, childTypes: [Swift.String : Mtribes.MTExperience.Type]? = nil)
}
public struct MTTemplate {
  public let id: Swift.String
  public let v: Swift.String
  public let enabled: Swift.Bool
  public init(id: Swift.String, v: Swift.String, enabled: Swift.Bool)
}
public class MTClient {
  public var session: Mtribes.MTSession! {
    get
  }
  public init(apiKey: Swift.String, fallbacks: Mtribes.MTFallbacks)
  @objc deinit
}
extension Mtribes.MTClient {
  public var serviceURL: Foundation.URL {
    get
    set
  }
  public var waitForMsec: Swift.Int {
    get
    set
  }
  public var sessionLock: Swift.Bool {
    get
    set
  }
  public var isDebugMode: Swift.Bool {
    get
    set
  }
  public var userTracking: Swift.Bool {
    get
    set
  }
  public var includeTribes: Swift.Bool {
    get
    set
  }
}
open class MTCollection {
  final public let id: Swift.String
  public init(id: Swift.String, broker: Mtribes.MTBroker, template: Mtribes.MTTemplate)
  @objc deinit
}
public struct MTColor : Swift.Codable {
  public let value: Swift.String?
  public let opacity: CoreFoundation.CGFloat
  public init(value: Swift.String? = nil, opacity: CoreFoundation.CGFloat = 1)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum MTChangeEventType {
  case add
  case remove
  case update
  public static func == (a: Mtribes.MTChangeEventType, b: Mtribes.MTChangeEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MTChangeEvent {
  final public let type: Mtribes.MTChangeEventType
  final public let source: Swift.String
  public var children: [Mtribes.MTChangeEvent]?
  public init(type: Mtribes.MTChangeEventType, source: Swift.String, children: [Mtribes.MTChangeEvent]? = nil)
  @objc deinit
}
public class MTSessionEvent : Mtribes.MTChangeEvent {
  final public let status: Mtribes.MTSessionStatus
  final public let statusChange: Swift.Bool
  final public let userChange: Swift.Bool
  final public let readyChange: Swift.Bool
  final public let error: Swift.Error?
  public init(type: Mtribes.MTChangeEventType, source: Swift.String, children: [Mtribes.MTChangeEvent]? = nil, status: Mtribes.MTSessionStatus, statusChange: Swift.Bool = false, userChange: Swift.Bool = false, readyChange: Swift.Bool = false, error: Swift.Error? = nil)
  @objc deinit
}
open class MTExperience {
  final public let id: Swift.String
  final public let parentId: Swift.String
  final public let broker: Mtribes.MTBroker
  public var enabled: Swift.Bool {
    get
  }
  public var scenarioId: Swift.String? {
    get
  }
  public var dataJson: Swift.String {
    get
  }
  required public init(id: Swift.String, parentId: Swift.String, broker: Mtribes.MTBroker)
  public func register(template: Mtribes.MTTemplate)
  public func track(type: Swift.String, details: Mtribes.EventMetadata? = nil, payload: Swift.String? = nil)
  public func changedWithCallback(owner: Mtribes.EventOwner, _ handler: @escaping Mtribes.ChangedHandler)
  @objc deinit
}
public protocol MTExperienceData : Swift.Decodable {
  init()
}
public typealias OAIPair<T> = (key: Swift.String, value: T)
public struct MTExperienceState : Swift.Codable, Swift.Equatable {
  public let on: Swift.Bool
  public let sid: Swift.String?
  public let data: Swift.String?
  public let se: [Mtribes.SectionEntry]?
  public let v: Swift.Int
  public let pid: Swift.String?
  public static func == (a: Mtribes.MTExperienceState, b: Mtribes.MTExperienceState) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
open class MTSection : Swift.Sequence {
  final public let id: Swift.String
  final public let broker: Mtribes.MTBroker
  open var childTypes: [Swift.String : Mtribes.MTExperience.Type] {
    get
  }
  public init(id: Swift.String, parentId: Swift.String, broker: Mtribes.MTBroker, template: Mtribes.MTTemplate)
  public var children: [Mtribes.MTExperience] {
    get
  }
  public func changedWithCallback(owner: Mtribes.EventOwner, _ handler: @escaping Mtribes.ChangedHandler)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Mtribes.MTExperience>>.Element
  public typealias Iterator = Swift.Array<Mtribes.MTExperience>.Iterator
  @objc deinit
}
extension Mtribes.MTSection {
  public __consuming func makeIterator() -> Swift.Array<Mtribes.MTExperience>.Iterator
}
public typealias SessionIdentifyHandler = (Mtribes.MTSessionStatus) -> Swift.Void
public typealias ChangedHandler = (Mtribes.MTChangeEvent) -> Swift.Void
public typealias SessionHandler = (Mtribes.MTSessionEvent) -> Swift.Void
@_hasMissingDesignatedInitializers public class MTSession {
  public var status: Mtribes.MTSessionStatus {
    get
  }
  public var anonymous: Swift.Bool {
    get
  }
  public var ready: Swift.Bool {
    get
  }
  public var tribeIds: [Swift.String] {
    get
  }
  public func startWithCallback(options: Mtribes.StartOptions? = nil, completion: Mtribes.SessionIdentifyHandler? = nil)
  public func updateWithCallback(fields: Mtribes.UserFields = [:], completion: Mtribes.SessionIdentifyHandler? = nil)
  public func changedWithCallback(owner: Mtribes.EventOwner, _ handler: @escaping Mtribes.SessionHandler)
  public func stopObserveSession()
  public func applicationDidEnterBackground()
  public func applicationWillEnterForeground()
  public func track(type: Swift.String, details: Mtribes.EventMetadata? = nil, payload: Swift.String? = nil)
  @objc deinit
}
public struct EventMetadata : Swift.Equatable {
  public init(_ pair1: (Swift.String, [Swift.String])? = nil, _ pair2: (Swift.String, [Swift.String])? = nil, _ pair3: (Swift.String, [Swift.String])? = nil)
  @available(*, deprecated, message: "Use (String, [String]) instead of (String, String)")
  public init(_ pair1: (Swift.String, Swift.String)? = nil, _ pair2: (Swift.String, Swift.String)? = nil, _ pair3: (Swift.String, Swift.String)? = nil)
  public static func == (lhs: Mtribes.EventMetadata, rhs: Mtribes.EventMetadata) -> Swift.Bool
}
public struct SectionEntry : Swift.Codable, Swift.Equatable {
  public let et: Swift.String
  public let id: Swift.String
  public static func == (a: Mtribes.SectionEntry, b: Mtribes.SectionEntry) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ServiceError : Swift.Error, Swift.Codable {
  public let message: Swift.String
  public let code: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MTSessionStatus {
  case created
  case initializing
  case errored
  case elapsed
  case primed
  public static func == (a: Mtribes.MTSessionStatus, b: Mtribes.MTSessionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct IdentifyOptions {
  public init(signed: Swift.String?)
}
public struct StartOptions {
  public var userId: Swift.String?
  public var fields: Mtribes.UserFields?
  public var signed: Swift.String?
  public init(userId: Swift.String? = nil, fields: Mtribes.UserFields? = nil, signed: Swift.String? = nil)
}
public struct MTFallbacks {
  public init(v: Swift.Int, json: Swift.String)
}
public typealias UserFields = [Swift.String : Mtribes.Field]
public protocol Field : Swift.Decodable, Swift.Encodable {
}
extension Swift.Int : Mtribes.Field {
}
extension Swift.String : Mtribes.Field {
}
extension Swift.Bool : Mtribes.Field {
}
extension Foundation.Date : Mtribes.Field {
}
extension Swift.Double : Mtribes.Field {
}
extension Foundation.Decimal : Mtribes.Field {
}
extension Swift.Float : Mtribes.Field {
}
extension CoreFoundation.CGFloat : Mtribes.Field {
}
extension Swift.Array : Mtribes.Field where Element : Mtribes.Field {
}
extension Mtribes.MTChangeEventType : Swift.Equatable {}
extension Mtribes.MTChangeEventType : Swift.Hashable {}
extension Mtribes.MTSessionStatus : Swift.Equatable {}
extension Mtribes.MTSessionStatus : Swift.Hashable {}
